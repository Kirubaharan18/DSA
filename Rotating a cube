type Point3D = { x: number, y: number, z: number };

function rotateX(point: Point3D, angle: number): Point3D {
    const { x, y, z } = point;
    const cosTheta = Math.cos(angle);
    const sinTheta = Math.sin(angle);
    return {
        x: x,
        y: y * cosTheta - z * sinTheta,
        z: y * sinTheta + z * cosTheta
    };
}

function rotateY(point: Point3D, angle: number): Point3D {
    const { x, y, z } = point;
    const cosTheta = Math.cos(angle);
    const sinTheta = Math.sin(angle);
    return {
        x: z * sinTheta + x * cosTheta,
        y: y,
        z: z * cosTheta - x * sinTheta
    };
}

function rotateZ(point: Point3D, angle: number): Point3D {
    const { x, y, z } = point;
    const cosTheta = Math.cos(angle);
    const sinTheta = Math.sin(angle);
    return {
        x: x * cosTheta - y * sinTheta,
        y: x * sinTheta + y * cosTheta,
        z: z
    };
}

function rotateCube() {
    // Define cube vertices
    let vertices: Point3D[] = [
        { x: -1, y: -1, z: -1 }, // 0
        { x:  1, y: -1, z: -1 }, // 1
        { x:  1, y:  1, z: -1 }, // 2
        { x: -1, y:  1, z: -1 }, // 3
        { x: -1, y: -1, z:  1 }, // 4
        { x:  1, y: -1, z:  1 }, // 5
        { x:  1, y:  1, z:  1 }, // 6
        { x: -1, y:  1, z:  1 }  // 7
    ];

    const angleX = Math.PI / 4; // Rotate around x-axis by 45 degrees
    const angleY = Math.PI / 3; // Rotate around y-axis by 60 degrees
    const angleZ = Math.PI / 6; // Rotate around z-axis by 30 degrees

    vertices = vertices.map(vertex => rotateX(vertex, angleX));
    vertices = vertices.map(vertex => rotateY(vertex, angleY));
    vertices = vertices.map(vertex => rotateZ(vertex, angleZ));

    console.log("Rotated Cube Vertices:");
    vertices.forEach((vertex, index) => {
        console.log(`Vertex ${index}: (${vertex.x}, ${vertex.y}, ${vertex.z})`);
    });
}

rotateCube();
