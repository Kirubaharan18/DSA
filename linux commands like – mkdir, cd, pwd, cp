mkdir (Make Directory)
----------------------
import java.io.File;

public class BasicLinuxCommands {

    public static void main(String[] args) {
        if (args.length < 2 || !args[0].equals("mkdir")) {
            System.out.println("Usage: java BasicLinuxCommands mkdir <directory_name>");
            return;
        }

        String directoryName = args[1];
        File directory = new File(directoryName);

        if (directory.mkdir()) {
            System.out.println("Directory created successfully: " + directory.getAbsolutePath());
        } else {
            System.out.println("Failed to create directory: " + directory.getAbsolutePath());
        }
    }
}
--------------------------------------------------------------------------------------------------------
cd (Change Directory)
----------------------
public class BasicLinuxCommands {

    public static void main(String[] args) {
        if (args.length < 2 || !args[0].equals("cd")) {
            System.out.println("Usage: java BasicLinuxCommands cd <directory_path>");
            return;
        }

        String directoryPath = args[1];
        File directory = new File(directoryPath);

        if (directory.exists() && directory.isDirectory()) {
            System.setProperty("user.dir", directory.getAbsolutePath());
            System.out.println("Current directory changed to: " + directory.getAbsolutePath());
        } else {
            System.out.println("Directory does not exist: " + directory.getAbsolutePath());
        }
    }
}
--------------------------------------------------------------------------------------------------------
pwd (Print Working Directory)
----------------------------
public class BasicLinuxCommands {

    public static void main(String[] args) {
        if (args.length < 1 || !args[0].equals("pwd")) {
            System.out.println("Usage: java BasicLinuxCommands pwd");
            return;
        }

        String currentDir = System.getProperty("user.dir");
        System.out.println("Current working directory: " + currentDir);
    }
}
--------------------------------------------------------------------------------------------------------------
cp (Copy File)
--------------

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;

public class BasicLinuxCommands {

    public static void main(String[] args) {
        if (args.length < 3 || !args[0].equals("cp")) {
            System.out.println("Usage: java BasicLinuxCommands cp <source_file_path> <destination_file_path>");
            return;
        }

        String sourceFilePath = args[1];
        String destinationFilePath = args[2];

        File sourceFile = new File(sourceFilePath);
        File destinationFile = new File(destinationFilePath);

        if (!sourceFile.exists()) {
            System.out.println("Source file does not exist: " + sourceFilePath);
            return;
        }

        try (FileInputStream fis = new FileInputStream(sourceFile);
             FileOutputStream fos = new FileOutputStream(destinationFile)) {

            byte[] buffer = new byte[1024];
            int length;
            while ((length = fis.read(buffer)) > 0) {
                fos.write(buffer, 0, length);
            }

            System.out.println("File copied successfully from " + sourceFilePath + " to " + destinationFilePath);

        } catch (IOException e) {
            System.out.println("Error copying file: " + e.getMessage());
        }
    }
}

